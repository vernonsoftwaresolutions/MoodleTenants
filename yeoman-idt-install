#!/bin/bash
#------------------------------------------------------------------------------
# Script:  idt-installer
#------------------------------------------------------------------------------
# IBM Cloud Developer Tools - CLI installer script for MacOS and Linux systems
#------------------------------------------------------------------------------
# Copyright (c) 2017, International Business Machines. All Rights Reserved.
#------------------------------------------------------------------------------

VERSION="1.0.1"
PROG="IBM Cloud Developer Tools - Installer"
INSTALLER_URL="https://ibm.biz/idt-installer"
GIT_URL="https://github.com/IBM-Bluemix/ibm-cloud-developer-tools"
SLACK_URL="https://slack-invite-ibm-cloud-tech.mybluemix.net/"
DEFAULT_BMX_URL="https://clis.ng.bluemix.net/install"

# Only use sudo if not running as root:
[ "$(id -u)" -ne 0 ] && SUDO=sudo || SUDO=""

if [[ "$IDT_INSTALL_USE_PROD" != false ]]; then
  unset IDT_INSTALL_BMX_URL IDT_INSTALL_BMX_REPO_NAME IDT_INSTALL_BMX_REPO_URL
fi
IDT_INSTALL_BMX_URL="${IDT_INSTALL_BMX_URL:=$DEFAULT_BMX_URL}"
IDT_INSTALL_BMX_REPO_NAME="${IDT_INSTALL_BMX_REPO_NAME:=Bluemix}"
IDT_INSTALL_BMX_REPO_URL="${IDT_INSTALL_BMX_REPO_URL:=https://plugins.ng.bluemix.net}"

#-- External programs, format is "binary, curl, install url"
EXT_PROGS=(
  "git,git,https://git-scm.com/downloads"
  "docker,docker,https://docs.docker.com/engine/installation/"
  "kubectl,kubectl,https://kubernetes.io/docs/tasks/tools/install-kubectl/"
  "helm,kubernetes-helm,https://github.com/kubernetes/helm/blob/master/docs/install.md"
)

#-- BX plugins to process
PLUGINS=(
  "Cloud-Functions"
  "container-registry"
  "container-service"
  "dev"
  "schematics"
  "sdk-gen"
)

#------------------------------------------------------------------------------
function help {
  cat <<-!!EOF

  Usage: ${PROG} [<args>]

  Where <args> is:
	  install             [Default] Perform full install (or update) of all needed CLIs and Plugins
    uninstall           Uninstall full IBM Cloud CLI env, including 'bx', and plugins
    help | -h | -?      Show this help
    --nobrew            Force not using 'brew' installer on MacOS
    --trace             Eanble verbose tracing of all activity

  If "install" (or no action provided), a full CLI installation (or update) will occur:
  1. Pre-req check for 'git', 'docker', 'kubectl', and 'helm'
  2. Install latest IBM Cloud 'bx' CLI
  3. Install all required plugins
  4. Defines aliases to improve useability
      - idt : Shortcut for normal "bx dev" command
      - idt-update : Runs this installer checking for and installing any updates
      - idt-uninstall : Uninstalls 'bx cli' and all plugins  

  If "uninstall", the IBM Cloud CLI and plugins are removed from the system, including personal metadata.
  Note: Pre-req CLIs listed above are NOT uninstalled.

  Chat with us on Slack: ${SLACK_URL}, channel #developer-tools
  Submit any issues to : ${GIT_URL}/issues

!!EOF
}


#------------------------------------------------------------------------------
#-- ${FUNCNAME[1]} == Calling function's name
#-- Colors escape seqs
YEL='\033[1;33m'
CYN='\033[0;36m'
GRN='\033[1;32m'
RED='\033[1;31m'
NRM='\033[0m'

function log {
  echo -e "${CYN}[${FUNCNAME[1]}]${NRM} $*"
}

function warn {
  echo -e "${CYN}[${FUNCNAME[1]}]${NRM} ${YEL}WARN${NRM}: $*"
}

function error {
  echo -e "${CYN}[${FUNCNAME[1]}]${NRM} ${RED}ERROR${NRM}: $*"
  exit -1
}

function prompt {
  label=${1}
  default=${2}
  if [[ -z $default ]]; then
    echo -en "${label}: ${CYN}" > /dev/tty
  else
    echo -en "${label} [$default]: ${CYN}"  > /dev/tty
  fi
  read -r
  echo -e "${NRM}"  > /dev/tty
  #-- Use $REPLY to get user's input
}

#------------------------------------------------------------------------------
function uninstall {
  if [[ -t 0 ]]; then   #-- are we in a terminal?
    echo
    prompt "Please confirm you want to uninstall IBM Cloud Developer Tools (y/N)?"
    if [[ "$REPLY" != [Yy]* ]]; then
      log "Uninstall aborted at user request"
      return
    fi
  fi
  warn "Starting Uninstall..."
  [ "$SUDO" ] && log "You may be prompted for 'sudo' password."

  log "Removing IBM Cloud 'bx' CLI..."
  if [[ "${PLATFORM}" == "Darwin" && "$USEBREW" == true ]]; then
    brew cask uninstall "bluemix-cli"
  fi
  #-- Run the following regardless
  $SUDO rm -f  /usr/local/bin/bluemix
  $SUDO rm -f  /usr/local/bin/bx
  $SUDO rm -f  /usr/local/bin/bluemix-analytics
  $SUDO rm -rf /usr/local/Bluemix
  #-- Taken from bluemix CLI brew uninstaller
  if [[ -f /etc/profile ]]; then
    $SUDO sed -E -i ".bluemix_uninstall_bak" \
                      -e '/^### Added by the Bluemix CLI$/d' \
                      -e '/^source \/usr\/local\/Bluemix\/bx\/bash_autocomplete$/d' \
                      /etc/profile
  fi
  if [[ -f ~/.bashrc ]]; then
    sed -E -i ".bluemix_uninstall_bak" \
                  -e '/^### Added by the Bluemix CLI$/d' \
                  -e '/^source \/usr\/local\/Bluemix\/bx\/bash_autocomplete$/d' \
                  ~/.bashrc
  fi
  if [[ -f ~/.zshrc ]]; then
    sed -E -i ".bluemix_uninstall_bak" \
                  -e '/^### Added by the Bluemix CLI$/d' \
                  -e '/^source \/usr\/local\/Bluemix\/bx\/zsh_autocomplete$/d' \
                  ~/.zshrc
  fi
  env_setup remove

  rm -rf ~/.bluemix

  log "Uninstall finished."
}

#------------------------------------------------------------------------------
function install {
  log "Starting Full Installation..."
  [ "$SUDO" ] && log "Note: You may be prompted for your 'sudo' password during install."
  install_deps
  install_bx
  install_plugins
  env_setup add
  log "Install finished."
}

#------------------------------------------------------------------------------
function warn_unsupported {
  warn "Only MacOS and Linux systems are supported by this installer."
  warn "For Windows, please follow manual installation instructions at:"
  warn "${GIT_URL}"
  error "Unsupported platform: ${PLATFORM}"
}

#------------------------------------------------------------------------------
function install_deps {
  has_error=false
  #-- check for/install brew for macos
  if [[ "$PLATFORM" == "Darwin" && "$USEBREW" != false ]]; then
    if [[ -z "$(which brew)" && -n "$(which ruby)" ]]; then
      warn "'brew' installer not found, attempting to install..."
      ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      log "'brew' installation completed."
    fi
  fi
  [[ -z "$(which brew)" ]] && USEBREW=false

  # Install curl if not already installed.
  if ! $(which curl >/dev/null 2&>1); then
    if [ "$PLATFORM" = Linux ]; then
      $SUDO apt-get -y update
      $SUDO apt-get -y install curl
    fi
  fi

  for item in "${EXT_PROGS[@]}"; do
    #-- Parse array item into vars
    IFS="," read -r prog_bin prog_brew prog_url <<< "$item"
    log "Checking for external dependency: ${prog_bin}"
    if [[ -z "$(which "$prog_bin")" ]]; then
      log "${prog_bin} not found, attempting to install..."
      if [[ "$PLATFORM" == "Darwin" && "$USEBREW" == true ]]; then
        brew install "$prog_brew"
        log  "You should review any setup requirements for '${prog_bin}' from: ${prog_url}"
      elif [[ "$prog_bin" == "git" ]]; then
        if [[ -n "$(which "apt-get")" ]]; then
          # Get up-to-date git.
          $SUDO apt-get -y update

          # Make sure add-apt-repository is installed.
          if ! $(which add-apt-repository >/dev/null 2&>1); then
            $SUDO apt-get install -y software-properties-common python-software-properties
          fi
          $SUDO add-apt-repository -y ppa:git-core/ppa
          $SUDO apt-get -y update
          $SUDO apt-get -y install git
          log  "Review any setup requirements for '${prog_bin}' from: ${prog_url}"
        else
          warn_unsupported
        fi
      elif [[ "$prog_bin" == "docker" ]]; then
        case $PLATFORM in
         "Linux")
           curl -fsSL get.docker.com | $SUDO sh -
           if [ "$SUDO" ]; then
             # Allow docker to run as a non-root user (if not running as root).
             sudo groupadd docker
             sudo usermod -aG docker $USER
           else
             log 'If you want to run docker without sudo run: "sudo groupadd docker && sudo usermod -aG docker $USER"'
           fi
           log  "Review any setup requirements for '${prog_bin}' from: ${prog_url}"
           ;;
         *)
           warn_unsupported
          ;;
        esac
        log  "Review any setup requirements for '${prog_bin}' from: ${prog_url}"
      elif [[ "$prog_bin" == "kubectl" ]]; then
        case $PLATFORM in
        "Linux")
          curl --progress-bar -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          ;;
        "Darwin")
          curl --progress-bar -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl
          ;;
        *)
          warn_unsupported
          ;;
        esac
      chmod +x ./kubectl
        $SUDO mv ./kubectl /usr/local/bin/kubectl
        log  "Review any setup requirements for '${prog_bin}' from: ${prog_url}"
      elif [[ "$prog_bin" == "helm" ]]; then
        curl -fsSL https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash
        log  "Review any setup requirements for '${prog_bin}' from: ${prog_url}"
      else
        warn "Unable to automatically install '${prog_bin}'"
        log  "You must manually install '${prog_bin}' from: ${prog_url}"
        has_error=true
      fi
    fi
  done
  if [[ "$has_error" == true ]]; then
    error "One or more prereqs are missing. You must install these prior to using re-running this utility"
  fi
}

#------------------------------------------------------------------------------
function install_bx {
  if [[ -z "$(which bx)" ]]; then
    log "Installing IBM Cloud 'bx' CLI for platform '${PLATFORM}'..."
    case "$PLATFORM" in
    "Darwin")
      #-- Only use BREW if using default bluemix URL (not an internal url)
      if [[ "$USEBREW" == true && "$IDT_INSTALL_BMX_REPO_NAME" == "Bluemix" ]]; then
        brew cask reinstall "caskroom/cask/bluemix-cli"
      else
        log "Downloading and installing IBM Cloud 'bx' CLI from: ${IDT_INSTALL_BMX_URL}/osx"
        sh <(curl -fsSL ${IDT_INSTALL_BMX_URL}/osx)
      fi
      ;;
    "Linux")
      log "Downloading and installing IBM Cloud 'bx' CLI from: ${IDT_INSTALL_BMX_URL}/linux"
      sh <(curl -fsSL ${IDT_INSTALL_BMX_URL}/linux)
      ;;
    esac
    log "IBM Cloud 'bx' CLI install finished."
  else #-- Upgrade
    log "Updating exisitng IBM Cloud 'bx' CLI..."
    bx update
  fi
  log "Running 'bx --version'..."
  bx --version
}

#------------------------------------------------------------------------------
function install_plugins {
  log "Installing / updating required plugins..."
  if [[ -z "$(bx plugin repos | grep ${IDT_INSTALL_BMX_REPO_NAME})" ]]; then
    log "Adding repo definition for: ${IDT_INSTALL_BMX_REPO_NAME} >> ${IDT_INSTALL_BMX_REPO_URL}"
    bx plugin repo-add "${IDT_INSTALL_BMX_REPO_NAME}" "${IDT_INSTALL_BMX_REPO_URL}"
  fi
  for plugin in "${PLUGINS[@]}"; do
    log "Checking status of plugin: ${plugin}"
    read -r p ver <<< "$(bx plugin list | grep "^${plugin} ")"
    if [[ -z "$p" ]]; then
      log "Installing plugin '$plugin'"
      bx plugin install -r "${IDT_INSTALL_BMX_REPO_NAME}" "$plugin"
    else
      log "Attempting to update plugin '$plugin' from version '$ver'"
      bx plugin update -r "${IDT_INSTALL_BMX_REPO_NAME}" "$plugin"
    fi
  done
  log "Running 'bx plugin list'..."
  bx plugin list
  log "Finished installing/updating plugins"
}

#------------------------------------------------------------------------------
function env_setup {
  env_file=""
  show_warn=false
  if   [[ -f ~/.bashrc ]]      ; then env_file=~/.bashrc
  elif [[ -f ~/.bash_profile ]]; then env_file=~/.bash_profile
  elif [[ -f ~/.profile ]]     ; then env_file=~/.profile
  else
    env_file=~/.bashrc
    warn "Creating new '${env_file}' file to contain aliases"
    touch "${env_file}" || error "Failed to create '${env_file}' file!"
  fi
  case "$1" in
  "add")
    if [[ -z "$(grep 'alias idt="bx dev"' "$env_file")" ]]; then
      log "Adding 'idt' aliases to: ${env_file}"
      cp -f "$env_file" "$env_file".idt_install_bak || error "Add - Failed to backup file: ${env_file}"
      echo '#-- Added by the IDT Installer' >> "$env_file"
      echo 'alias idt="bx dev"'             >> "$env_file"
      if [[ "$PLATFORM" == "Darwin" && "$USEBREW" == false ]]; then
        echo 'alias idt-update="curl -sL' "$INSTALLER_URL" '| bash -s -- --nobrew"' >> "$env_file"
        echo 'alias idt-uninstall="curl -sL' "$INSTALLER_URL" '| bash -s -- --nobrew uninstall"' >> "$env_file"
      else
        echo 'alias idt-update="curl -sL' "$INSTALLER_URL" '| bash"' >> "$env_file"
        echo 'alias idt-uninstall="curl -sL' "$INSTALLER_URL" '| bash -s uninstall"' >> "$env_file"
      fi
      show_warn=true
    else
      log "'idt' aliases are already defined in: ${env_file}"
    fi
    if [[ -f ~/.bash_profile && -z "$(grep '.bashrc' ~/.bash_profile)" ]]; then
      log "Adding '~/.bashrc' loader into '~/.bash_profile'"
      echo "# Load .bashrc settings"              >> ~/.bash_profile
      echo "[ -f ~/.bashrc ] && source ~/.bashrc" >> ~/.bash_profile
    fi
    log "The following aliases are defined to access the IBM Cloud Developer Tools CLI:"
    log "  ${GRN}idt${NRM}           : Main command line. Shorthand for standard '${CYN}bx dev${NRM}' command"
    log "  ${GRN}idt-update${NRM}    : Update your IBM Cloud Developer Tools to the latest version"
    log "  ${GRN}idt-uninstall${NRM} : Uninstall the IBM Cloud Developer Tools"
    if [[ "$show_warn" == true ]]; then
      warn "To access the aliases above, you need to either restart your terminal session,"
      warn "or reload your bash env (ie '. ${env_file}')"
    fi
  ;;
  "remove")
    if [[ -n "$(grep 'alias idt="bx dev"' "$env_file")" ]]; then
      log "Removing 'idt' aliases from: ${env_file}"
      sed -E -i ".idt_uninstall_bak" \
            -e '/^#-- Added by the IDT Installer$/d' \
            -e '/^alias idt=\"bx dev\"$/d' \
            -e '/^alias idt-update=/d' \
            -e '/^alias idt-uninstall=/d' \
            ${env_file}
    fi
  ;;
  *) error "Internal error - called with invalid parameter: ${1}";;
  esac
}

#------------------------------------------------------------------------------
# MAIN
#------------------------------------------------------------------------------
function main {
  log "--==[ ${GRN}${PROG}, v${VERSION}${NRM} ]==--"
  (( SECS = SECONDS ))

  TMPDIR=${TMPDIR:-"/tmp"}
  PLATFORM=$(uname)
  ACTION=""
  USEBREW=true

  #-- Parse args
  while [[ $# -gt 0 ]]; do
    case "$1" in
    "--trace")
      warn "Enabling verbose tracing of all activity"
      set -x
      ;;
    "--nobrew")
      USEBREW=false;
      warn "Disabling the use of 'brew' for MacOS packages"
      log  "Note: Ensure you are consistent with this option when installing / updating / uninstalling"
      ;;
    "install")    ACTION="install";;
    "uninstall")  ACTION="uninstall";;
    *)            ACTION="help";;
    esac
    shift
  done

  case "$PLATFORM" in
  "Darwin")
    ;;
  "Linux")
    # Linux distro, e.g "Ubuntu", "RedHatEnterpriseWorkstation", "RedHatEnterpriseServer", "CentOS", "Debian"
    DISTRO=$(lsb_release -is 2>/dev/null || echo "")
    if [ "$DISTRO" != Ubuntu ]; then
      warn "Linux has only been tested on Ubuntu, please let us know if you use this utility on other Distros"
    fi
    ;;
  *)
    warn_unsupported
    ;;
  esac

  case "$ACTION" in
  "")           install;;
  "install")    install;;
  "uninstall")  uninstall;;
  *)            help;;
  esac

  (( SECS = SECONDS - SECS ))
  log "--==[ ${GRN}Total time: ${SECS} seconds${NRM} ]==--"
}

#------------------------------------------------------------------------------
#-- Kick things off
#------------------------------------------------------------------------------
main "$@"

#------------------------------------------------------------------------------
# EOF
#------------------------------------------------------------------------------
